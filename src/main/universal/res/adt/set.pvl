adt `set`<T> {
  pure int set_size(`set`<T> xs);
  pure boolean set_in(`set`<T> xs, T t);

  pure `set`<T> set_empty();
  pure `set`<T> set_singleton(T t);
  pure `set`<T> set_union_one(`set`<T> xs, T t);

  pure `set`<T> set_union(`set`<T> xs, `set`<T> ys);
  pure `set`<T> set_intersection(`set`<T> xs, `set`<T> ys);
  pure `set`<T> set_difference(`set`<T> xs, `set`<T> ys);

  pure boolean set_subset(`set`<T> xs, `set`<T> ys);
  pure boolean set_equal(`set`<T> xs, `set`<T> ys);
  pure T set_skolem(`set`<T> xs, `set`<T> ys);

  axiom (∀`set`<T> xs; {:set_size(xs):} >= 0);
  axiom (∀`set`<T> xs;
    (({:set_size(xs):} == 0) == (xs == set_empty())) &&
    (set_size(xs) != 0 ==> (∃T t; set_in(xs, t)))
  );
  axiom (∀T t; {:set_size(set_singleton(t)):} == 1);
  axiom (∀`set`<T> xs, T t; {:set_size(set_union_one(xs, t)):} == (set_in(xs, t) ? set_size(xs) : set_size(xs)+1));
  axiom (∀`set`<T> xs, `set`<T> ys;
    {:1:set_size(set_union(xs, ys)):} + {:2:set_size(set_intersection(xs, ys)):}
    == set_size(xs) + set_size(ys)
  );
  axiom (∀`set`<T> xs, `set`<T> ys;
    {:set_size(set_difference(xs, ys)):} + set_size(set_difference(ys, xs)) + set_size(set_intersection(xs, ys)) == set_size(set_union(xs, ys))
    && set_size(set_difference(xs, ys)) == set_size(xs) - set_size(set_intersection(xs, ys))
  );

  axiom (∀T t; !{:set_in(seq_empty(), t):});
  axiom (∀T t1, T t2; {:set_in(set_singleton(t1), t2):} == (t1 == t2));
  axiom (∀`set`<T> xs, T t1, T t2; {:set_in(set_union_one(xs, t1), t2):} == (t1 == t2 || set_in(xs, t2)));
  axiom (∀`set`<T> xs, T t; set_in({:set_union_one(xs, t):}, t));
  axiom (∀`set`<T> xs, T t1, T t2; {:set_in(xs, t2):} ==> set_in({:set_union_one(xs, t1):}, t2));

  axiom (∀`set`<T> xs, `set`<T> ys, T t; {:set_in(set_union(xs, ys), t):} == (set_in(xs, t) || set_in(ys, t)));
  axiom (∀`set`<T> xs, `set`<T> ys, T t; {:set_in(xs, t):} ==> set_in({:set_union(xs, ys):}, t));
  axiom (∀`set`<T> xs, `set`<T> ys, T t; {:set_in(ys, t):} ==> set_in({:set_union(xs, ys):}, t));

  axiom (∀`set`<T> xs, `set`<T> ys, T t;
    {:1: set_in({:2: {:3: set_intersection(xs, ys) :} :}, t) :}
    == ({:2:set_in(xs, t):} && {:3:set_in(ys, t):})
  );

  axiom (∀`set`<T> xs, `set`<T> ys; {:set_union(set_union(xs, ys), ys):} == set_union(xs, ys));
  axiom (∀`set`<T> xs, `set`<T> ys; {:set_union(set_union(xs, ys), xs):} == set_union(xs, ys));
  axiom (∀`set`<T> xs, `set`<T> ys; {:set_union(xs, set_union(xs, ys)):} == set_union(xs, ys));
  axiom (∀`set`<T> xs, `set`<T> ys; {:set_union(ys, set_union(xs, ys)):} == set_union(xs, ys));

  axiom (∀`set`<T> xs, `set`<T> ys; {:set_intersection(set_intersection(xs, ys), ys):} == set_intersection(xs, ys));
  axiom (∀`set`<T> xs, `set`<T> ys; {:set_intersection(set_intersection(xs, ys), xs):} == set_intersection(xs, ys));
  axiom (∀`set`<T> xs, `set`<T> ys; {:set_intersection(xs, set_intersection(xs, ys)):} == set_intersection(xs, ys));
  axiom (∀`set`<T> xs, `set`<T> ys; {:set_intersection(ys, set_intersection(xs, ys)):} == set_intersection(xs, ys));

  axiom (∀`set`<T> xs, `set`<T> ys, T t;
    {:1:set_in({:2:set_difference(xs, ys):}, t):} == ({:2:set_in(xs, t):} && !set_in(ys, t))
  );
  axiom (∀`set`<T> xs, `set`<T> ys, T t; {:set_in(ys, t):} ==> !set_in({:set_difference(xs, ys):}, t));

  axiom (∀`set`<T> xs, `set`<T> ys;
    {:set_subset(xs, ys):} == (∀T t; {:1:set_in(xs, t):} ==> {:2:set_in(ys, t):})
  );
  axiom (∀`set`<T> xs, `set`<T> ys;
    !{:set_subset(xs, ys):} ==> set_in(xs, set_skolem(xs, ys)) && !set_in(ys, set_skolem(xs, ys))
  );

  axiom (∀`set`<T> xs, `set`<T> ys; {:set_equal(xs, ys):} ==>
    xs == ys && set_size(xs) == set_size(ys) &&
    (∀T t; {:1:set_in(xs, t):} == {:2:set_in(ys, t):})
  );
  axiom (∀`set`<T> xs, `set`<T> ys;
    (xs == ys && set_equal(xs, ys)) ||
    (xs != ys && !set_equal(xs, ys) && (
      (set_in(xs, set_skolem(xs, ys)) && !set_in(ys, set_skolem(xs, ys))) ||
      (set_in(ys, set_skolem(ys, xs)) && !set_in(xs, set_skolem(ys, xs)))
    ))
  );
}