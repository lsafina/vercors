adt `map`<K, V> {
  pure set<tuple<K, V>> map_items(`map`<K, V> m);
  pure set<K> map_domain(`map`<K, V> m);
  pure set<V> map_values(`map`<K, V> m);
  pure int map_size(`map`<K, V> m);

  pure boolean map_disjoint(`map`<K, V> l, `map`<K, V> r);
  pure boolean map_equal(`map`<K, V> l, `map`<K, V> r);

  pure V map_apply(`map`<K, V> m, K k);
  pure `map`<K, V> map_empty();
  pure `map`<K, V> map_update(`map`<K, V> m, K k, V v);
  pure `map`<K, V> map_remove(`map`<K, V> m, K k);

  axiom (∀`map`<K, V> m; {:map_size(m):} >= 0);
  axiom (∀`map`<K, V> m; |{:map_items(m):}| == map_size(m));
  axiom (∀`map`<K, V> m; |{:map_domain(m):}| == map_size(m));
  axiom (∀`map`<K, V> m; |{:map_values(m):}| == map_size(m));

  axiom (∀`map`<K, V> m1, `map`<K, V> m2; {:map_disjoint(m1, m2):} == (∀K k; !(k \in map_domain(m1)) || !(k \in map_domain(m2))));

  axiom (∀K k; !{:k \in map_domain(map_empty()):});
  axiom (∀`map`<K, V> m;
    ({:map_size(m):} == 0) == (m == map_empty()) &&
    (map_size(m) != 0 ==> (∃tuple<K, V> i; i \in map_items(m))) &&
    (map_size(m) != 0 ==> (∃K k; k \in map_domain(m))) &&
    (map_size(m) != 0 ==> (∃V v; v \in map_values(m))) &&
    (∀tuple<K, V> i; {:i \in map_items(m):} ==> map_size(m) != 0) &&
    (∀K k; {:k \in map_domain(m):} ==> map_size(m) != 0) &&
    (∀V v; {:v \in map_values(m):} ==> map_size(m) != 0)
  );

  axiom (∀`map`<K, V> m1, `map`<K, V> m2;
    (∀K k; {:k \in map_domain(m1):} == {:k \in map_domain(m2):}) &&
    (∀K k; k \in map_domain(m1) ==> {:map_apply(m1, k):} == {:map_apply(m2, k):}) ==>
    {:map_equal(m1, m2):}
  );

  axiom (∀`map`<K, V> m1, `map`<K, V> m2; {:map_equal(m1, m2):} ==> m1 == m2);

  axiom (∀`map`<K, V> m, K k1, K k2, V v;
    (k1 == k2 ==> k2 \in map_domain(map_update(m, k1, v)) && map_apply(map_update(m, k1, v), k2) == v) &&
    (k1 != k2 ==>
      (k2 \in map_domain(map_update(m, k1, v))) == (k2 \in map_domain(m)) &&
      (k2 \in map_domain(map_update(m, k1, v)) ==> map_apply(map_update(m, k1, v), k2) == map_apply(m, k2))
    )
  );

  axiom (∀`map`<K, V> m, K k, V v;
    (k \in map_domain(m) ==> map_size(m) == map_size(map_update(m, k, v))) &&
    (!(k \in map_domain(m)) ==> map_size(m) + 1 == map_size(map_update(m, k, v)))
  );

  // something something [k, v] in items == k in domain == v in values

  axiom (∀`map`<K, V> m, K k; k \in map_domain(m) ==> map_apply(m, k) \in map_values(m));

  axiom (∀`map`<K, V> m, K k; !(k \in {:map_domain(map_remove(m, k)):}));
  axiom (∀`map`<K, V> m, K k1, K k2; k1 != k2 ==> {:map_apply(map_remove(m, k1), k2):} == map_apply(m, k2));
  axiom (∀`map`<K, V> m, K k1, K k2; k1 != k2 ==> ({:k2 \in map_domain(map_remove(m, k1)):} == k2 \in map_domain(m)));
  axiom (∀`map`<K, V> m, K k; k \in map_domain(m) ==> {:map_size(map_remove(m, k)):} == map_size(m) - 1);
  axiom (∀`map`<K, V> m, K k; k \in map_domain(m) ==> {:map_size(map_remove(m, k)):} == map_size(m));
  axiom (∀`map`<K, V> m, K k; !(k \in map_domain(m)) ==> {:map_remove(m, k):} == m);
}